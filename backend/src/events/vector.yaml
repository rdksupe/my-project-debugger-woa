http.post./api/vector/store:
  fn: vector-store
  authn: false
  summary: Store vector embeddings
  body:
    content:
      application/json:
        schema:
          type: object
          properties:
            text:
              type: string
              description: Text to be vectorized and stored
  responses:
    200:
      description: Vector stored successfully
    400:
      description: Bad request - missing text
    500:
      description: Server error

http.post./api/vector/search:
  fn: vector-search
  authn: false
  summary: Search vector embeddings
  body:
    content:
      application/json:
        schema:
          type: object
          properties:
            text:
              type: string
              description: Text to search with
            limit:
              type: number
              description: Maximum number of results to return
              default: 5
  responses:
    200:
      description: Search results
    400:
      description: Bad request - missing text
    500:
      description: Server error

http.post./api/code/context:
  fn: context-search
  authn: false
  summary: Process code analysis with LLM via Portkey
  body:
    content:
      application/json:
        schema:
          type: object
          properties:
            analysisContext:
              type: object
              required:
                - files
                - errorLog
                - projectContext
                - timestamp
              properties:
                files:
                  type: array
                  items:
                    type: object
                    required:
                      - name
                      - content
                    properties:
                      name:
                        type: string
                        description: Name or path of the file
                      content:
                        type: string
                        description: Content of the file
                errorLog:
                  type: string
                  description: Full error log including stack trace
                projectContext:
                  type: string
                  description: Formatted project context including system info, git status, dependencies and project structure
                timestamp:
                  type: string
                  format: date-time
                  description: ISO 8601 timestamp of when the context was gathered
            prompt:
              type: string
              description: User's question or specific analysis request
          required:
            - analysisContext
            - prompt
    responses:
      200:
        description: Successful response from LLM
        content:
          application/json:
            schema:
              type: object
              properties:
                answer:
                  type: string
                  description: LLM's analysis and response
                model:
                  type: string
                  description: LLM model used for analysis
                usage:
                  type: object 
                  properties:
                    prompt_tokens:
                      type: number
                      description: Number of tokens in the prompt
                    completion_tokens:
                      type: number
                      description: Number of tokens in the completion
                    total_tokens:
                      type: number
                      description: Total tokens used
              required:
                - answer
                - model
      400:
        description: Invalid request format or missing required fields
      503:
        description: LLM service unavailable or error

http.post./chat:
  summary: "Multi-provider chat completion endpoint"
  authn: false
  fn: chat
  body:
    content:
      application/json:
        schema:
          type: object
          properties:
            messages:
              type: array
              items:
                type: object
                properties:
                  role:
                    type: string
                    enum: [system, user, assistant, function]
                  content:
                    type: string
            prompt:
              type: string
            config:
              type: object
              additionalProperties: true
          anyOf:
            - required: [messages]
            - required: [prompt]
